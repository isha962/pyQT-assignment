import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
class CameraWindow(QWidget):
    def __init__(self, camera_index):
        super().__init__()

        self.camera_index = camera_index
        self.capture = cv2.VideoCapture(self.camera_index)

        
        self.pose_model = hub.load("https://tfhub.dev/google/movenet/singlepose/lightning/4")

        
        self.video_label = QLabel(self)
        self.video_label.setAlignment(Qt.AlignCenter)

        
        self.start_stop_button = QPushButton("Start", self)
        self.start_stop_button.clicked.connect(self.start_stop_feed)

        
        layout = QVBoxLayout()
        layout.addWidget(self.video_label)
        layout.addWidget(self.start_stop_button)
        self.setLayout(layout)

        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_feed)
        self.timer.start(30)  # Update the feed every 30ms

    def update_feed(self):
        _, frame = self.capture.read()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        height, width, _ = frame.shape

        
        poses = self.estimate_poses(frame)

        
        frame = self.draw_poses(frame, poses)

        
        image = QImage(frame.data, width, height, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(image)
        self.video_label.setPixmap(pixmap)

    def estimate_poses(self, frame):
        
        input_image = tf.convert_to_tensor(frame)
        input_image = tf.expand_dims(input_image, axis=0)
        input_image = input_image / 255.0  # Normalize pixel values

        
        outputs = self.pose_model(input_image)
        keypoints = outputs["output_0"].numpy()

        return keypoints

    def draw_poses(self, frame, poses):
        for pose in poses:
            keypoints = np.squeeze(pose)
            for i in range(len(keypoints)):
                keypoint = keypoints[i]
                x, y = int(keypoint[1] * frame.shape[1]), int(keypoint[0] * frame.shape[0])
                cv2.circle(frame, (x, y), 5, (0, 255, 0), -1)

        return frame
